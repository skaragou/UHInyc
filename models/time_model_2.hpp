
// Code generated by stanc v2.28.1
#include <stan/model/model_header.hpp>
namespace time_model_2_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 54> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 22, column 2 to column 24)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 23, column 2 to column 27)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 24, column 2 to column 24)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 28, column 2 to column 20)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 30, column 2 to column 20)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 31, column 2 to column 51)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 34, column 4 to column 23)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 35, column 4 to column 60)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 33, column 16 to line 36, column 3)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 33, column 2 to line 36, column 3)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 63, column 2 to column 20)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 67, column 6 to column 57)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 66, column 19 to line 68, column 5)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 66, column 4 to line 68, column 5)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 65, column 17 to line 69, column 3)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 65, column 2 to line 69, column 3)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 52, column 2 to column 24)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 53, column 2 to column 27)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 54, column 2 to column 37)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 57, column 4 to column 47)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 56, column 17 to line 58, column 3)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 56, column 2 to line 58, column 3)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 2, column 2 to column 17)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 3, column 2 to column 17)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 4, column 2 to column 17)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 5, column 2 to column 17)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 6, column 2 to column 17)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 7, column 14 to column 15)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 7, column 9 to column 10)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 7, column 2 to column 17)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 8, column 14 to column 15)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 8, column 9 to column 10)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 8, column 2 to column 17)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 9, column 13 to column 14)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 9, column 2 to column 26)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 11, column 13 to column 14)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 11, column 2 to column 24)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 14, column 2 to column 16)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 15, column 16 to column 17)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 15, column 9 to column 10)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 15, column 2 to column 30)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 18, column 16 to column 17)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 18, column 9 to column 10)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 18, column 2 to column 30)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 22, column 9 to column 10)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 22, column 12 to column 13)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 23, column 24 to column 25)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 28, column 9 to column 10)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 28, column 12 to column 13)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 30, column 13 to column 14)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 63, column 13 to column 14)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 63, column 15 to column 16)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/models/time_model_2.stan', line 63, column 17 to column 18)"};



class time_model_2_model final : public model_base_crtp<time_model_2_model> {

 private:
  int N;
  int M;
  int H;
  int K;
  int L;
  std::vector<Eigen::Matrix<double, -1, 1>> X;
  std::vector<Eigen::Matrix<double, -1, 1>> y;
  Eigen::Matrix<double, 1, -1> beta_mean__;
  Eigen::Matrix<double, 1, -1> beta_sd__;
  int T;
  std::vector<Eigen::Matrix<double, -1, 1>> X_t;
  std::vector<Eigen::Matrix<double, -1, 1>> y_t; 
  Eigen::Map<Eigen::Matrix<double, 1, -1>> beta_mean{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, 1, -1>> beta_sd{nullptr, 0};
 
 public:
  ~time_model_2_model() { }
  
  inline std::string model_name() const final { return "time_model_2_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.28.1", "stancflags = "};
  }
  
  
  time_model_2_model(stan::io::var_context& context__,
                     unsigned int random_seed__ = 0,
                     std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "time_model_2_model_namespace::time_model_2_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 23;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 23;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 23;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 24;
      context__.validate_dims("data initialization","M","int",
           std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      
      current_statement__ = 24;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 24;
      check_greater_or_equal(function__, "M", M, 0);
      current_statement__ = 25;
      context__.validate_dims("data initialization","H","int",
           std::vector<size_t>{});
      H = std::numeric_limits<int>::min();
      
      current_statement__ = 25;
      H = context__.vals_i("H")[(1 - 1)];
      current_statement__ = 25;
      check_greater_or_equal(function__, "H", H, 0);
      current_statement__ = 26;
      context__.validate_dims("data initialization","K","int",
           std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      
      current_statement__ = 26;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 26;
      check_greater_or_equal(function__, "K", K, 0);
      current_statement__ = 27;
      context__.validate_dims("data initialization","L","int",
           std::vector<size_t>{});
      L = std::numeric_limits<int>::min();
      
      current_statement__ = 27;
      L = context__.vals_i("L")[(1 - 1)];
      current_statement__ = 27;
      check_greater_or_equal(function__, "L", L, 0);
      current_statement__ = 28;
      validate_non_negative_index("X", "N", N);
      current_statement__ = 29;
      validate_non_negative_index("X", "K", K);
      current_statement__ = 30;
      context__.validate_dims("data initialization","X","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(K)});
      X = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(K));
      
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 30;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 30;
        pos__ = 1;
        current_statement__ = 30;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 30;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 30;
            assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 30;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 31;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 32;
      validate_non_negative_index("y", "H", H);
      current_statement__ = 33;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(H)});
      y = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(H));
      
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 33;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 33;
        pos__ = 1;
        current_statement__ = 33;
        for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
          current_statement__ = 33;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 33;
            assign(y, y_flat__[(pos__ - 1)],
              "assigning variable y", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 33;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 34;
      validate_non_negative_index("beta_mean", "K", K);
      current_statement__ = 35;
      context__.validate_dims("data initialization","beta_mean","double",
           std::vector<size_t>{static_cast<size_t>(K)});
      beta_mean__ = Eigen::Matrix<double, 1, -1>(K);
      new (&beta_mean) Eigen::Map<Eigen::Matrix<double, 1, -1>>(beta_mean__.data(), K);
      
      
      {
        std::vector<local_scalar_t__> beta_mean_flat__;
        current_statement__ = 35;
        beta_mean_flat__ = context__.vals_r("beta_mean");
        current_statement__ = 35;
        pos__ = 1;
        current_statement__ = 35;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 35;
          assign(beta_mean, beta_mean_flat__[(pos__ - 1)],
            "assigning variable beta_mean", index_uni(sym1__));
          current_statement__ = 35;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 36;
      validate_non_negative_index("beta_sd", "K", K);
      current_statement__ = 37;
      context__.validate_dims("data initialization","beta_sd","double",
           std::vector<size_t>{static_cast<size_t>(K)});
      beta_sd__ = Eigen::Matrix<double, 1, -1>(K);
      new (&beta_sd) Eigen::Map<Eigen::Matrix<double, 1, -1>>(beta_sd__.data(), K);
      
      
      {
        std::vector<local_scalar_t__> beta_sd_flat__;
        current_statement__ = 37;
        beta_sd_flat__ = context__.vals_r("beta_sd");
        current_statement__ = 37;
        pos__ = 1;
        current_statement__ = 37;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 37;
          assign(beta_sd, beta_sd_flat__[(pos__ - 1)],
            "assigning variable beta_sd", index_uni(sym1__));
          current_statement__ = 37;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 38;
      T = std::numeric_limits<int>::min();
      
      current_statement__ = 38;
      T = (N - M);
      current_statement__ = 39;
      validate_non_negative_index("X_t", "M", M);
      current_statement__ = 40;
      validate_non_negative_index("X_t", "K", K);
      current_statement__ = 41;
      X_t = std::vector<Eigen::Matrix<double, -1, 1>>(M, Eigen::Matrix<double, -1, 1>(K));
      stan::math::fill(X_t, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 41;
      assign(X_t, rvalue(X, "X", index_min_max(1, M), index_omni()),
        "assigning variable X_t");
      current_statement__ = 42;
      validate_non_negative_index("y_t", "M", M);
      current_statement__ = 43;
      validate_non_negative_index("y_t", "H", H);
      current_statement__ = 44;
      y_t = std::vector<Eigen::Matrix<double, -1, 1>>(M, Eigen::Matrix<double, -1, 1>(H));
      stan::math::fill(y_t, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 44;
      assign(y_t, rvalue(y, "y", index_min_max(1, M), index_omni()),
        "assigning variable y_t");
      current_statement__ = 45;
      validate_non_negative_index("beta_raw", "H", H);
      current_statement__ = 46;
      validate_non_negative_index("beta_raw", "K", K);
      current_statement__ = 47;
      validate_non_negative_index("sigma_b", "K", K);
      current_statement__ = 48;
      validate_non_negative_index("beta", "H", H);
      current_statement__ = 49;
      validate_non_negative_index("beta", "K", K);
      current_statement__ = 50;
      validate_non_negative_index("tmp", "K", K);
      current_statement__ = 51;
      validate_non_negative_index("y_rep", "L", L);
      current_statement__ = 52;
      validate_non_negative_index("y_rep", "M", M);
      current_statement__ = 53;
      validate_non_negative_index("y_rep", "H", H);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (H * K) + K + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "time_model_2_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, -1> beta_raw;
      beta_raw = Eigen::Matrix<local_scalar_t__, -1, -1>(H, K);
      stan::math::fill(beta_raw, DUMMY_VAR__);
      
      current_statement__ = 1;
      beta_raw = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                   H, K);
      std::vector<local_scalar_t__> sigma_b;
      sigma_b = std::vector<local_scalar_t__>(K, DUMMY_VAR__);
      
      current_statement__ = 2;
      sigma_b = in__.template read_constrain_lb<std::vector<local_scalar_t__>, jacobian__>(
                  0, lp__, K);
      local_scalar_t__ sigma_y;
      sigma_y = DUMMY_VAR__;
      
      current_statement__ = 3;
      sigma_y = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, -1> beta;
      beta = Eigen::Matrix<local_scalar_t__, -1, -1>(H, K);
      stan::math::fill(beta, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, 1, -1> tmp;
      tmp = Eigen::Matrix<local_scalar_t__, 1, -1>(K);
      stan::math::fill(tmp, DUMMY_VAR__);
      
      current_statement__ = 6;
      assign(beta,
        add(beta_mean,
          elt_multiply(beta_sd,
            rvalue(beta_raw, "beta_raw", index_uni(1), index_omni()))),
        "assigning variable beta", index_uni(1), index_omni());
      current_statement__ = 10;
      for (int t = 2; t <= H; ++t) {
        current_statement__ = 7;
        assign(tmp, rvalue(beta, "beta", index_uni((t - 1)), index_omni()),
          "assigning variable tmp");
        current_statement__ = 8;
        assign(beta,
          add(tmp,
            elt_multiply(to_row_vector(sigma_b),
              rvalue(beta_raw, "beta_raw", index_uni(t), index_omni()))),
          "assigning variable beta", index_uni(t), index_omni());
      }
      {
        current_statement__ = 17;
        lp_accum__.add(normal_lpdf<propto__>(sigma_b, 0, 1));
        current_statement__ = 18;
        lp_accum__.add(inv_gamma_lpdf<propto__>(sigma_y, 1, 1));
        current_statement__ = 19;
        lp_accum__.add(normal_lpdf<propto__>(to_vector(beta_raw), 0, 1));
        current_statement__ = 22;
        for (int i = 1; i <= M; ++i) {
          current_statement__ = 20;
          lp_accum__.add(
            normal_lpdf<propto__>(
              rvalue(y_t, "y_t", index_uni(i), index_omni()),
              multiply(beta, rvalue(X_t, "X_t", index_uni(i), index_omni())),
              sigma_y));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "time_model_2_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, -1> beta_raw;
      beta_raw = Eigen::Matrix<double, -1, -1>(H, K);
      stan::math::fill(beta_raw, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      beta_raw = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                   H, K);
      std::vector<double> sigma_b;
      sigma_b = std::vector<double>(K, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 2;
      sigma_b = in__.template read_constrain_lb<std::vector<local_scalar_t__>, jacobian__>(
                  0, lp__, K);
      double sigma_y;
      sigma_y = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sigma_y = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      Eigen::Matrix<double, -1, -1> beta;
      beta = Eigen::Matrix<double, -1, -1>(H, K);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, 1, -1> tmp;
      tmp = Eigen::Matrix<double, 1, -1>(K);
      stan::math::fill(tmp, std::numeric_limits<double>::quiet_NaN());
      
      out__.write(beta_raw);
      out__.write(sigma_b);
      out__.write(sigma_y);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 6;
      assign(beta,
        add(beta_mean,
          elt_multiply(beta_sd,
            rvalue(beta_raw, "beta_raw", index_uni(1), index_omni()))),
        "assigning variable beta", index_uni(1), index_omni());
      current_statement__ = 10;
      for (int t = 2; t <= H; ++t) {
        current_statement__ = 7;
        assign(tmp, rvalue(beta, "beta", index_uni((t - 1)), index_omni()),
          "assigning variable tmp");
        current_statement__ = 8;
        assign(beta,
          add(tmp,
            elt_multiply(to_row_vector(sigma_b),
              rvalue(beta_raw, "beta_raw", index_uni(t), index_omni()))),
          "assigning variable beta", index_uni(t), index_omni());
      }
      if (emit_transformed_parameters__) {
        out__.write(beta);
        out__.write(tmp);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<std::vector<std::vector<double>>> y_rep;
      y_rep = std::vector<std::vector<std::vector<double>>>(L, std::vector<std::vector<double>>(M, std::vector<double>(H, std::numeric_limits<double>::quiet_NaN())));
      
      
      current_statement__ = 16;
      for (int l = 1; l <= L; ++l) {
        current_statement__ = 14;
        for (int i = 1; i <= M; ++i) {
          current_statement__ = 12;
          assign(y_rep,
            normal_rng(
              multiply(beta, rvalue(X_t, "X_t", index_uni(i), index_omni())),
              sigma_y, base_rng__),
            "assigning variable y_rep", index_uni(l), index_uni(i),
                                          index_omni());
        }
      }
      for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= L; ++sym3__) {
            out__.write(y_rep[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__, -1, -1> beta_raw;
      beta_raw = Eigen::Matrix<local_scalar_t__, -1, -1>(H, K);
      stan::math::fill(beta_raw, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= H; ++sym2__) {
          assign(beta_raw, in__.read<local_scalar_t__>(),
            "assigning variable beta_raw", index_uni(sym2__),
                                             index_uni(sym1__));
        }
      }
      out__.write(beta_raw);
      std::vector<local_scalar_t__> sigma_b;
      sigma_b = std::vector<local_scalar_t__>(K, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        sigma_b[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write_free_lb(0, sigma_b);
      local_scalar_t__ sigma_y;
      sigma_y = DUMMY_VAR__;
      
      sigma_y = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_y);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"beta_raw", "sigma_b", "sigma_y",
      "beta", "tmp", "y_rep"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(H)
                                                                   ,
                                                                   static_cast<size_t>(K)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(K)}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(H), static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(L), static_cast<size_t>(M),
                          static_cast<size_t>(H)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= H; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "beta_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_b" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma_y");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= H; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tmp" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= L; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "y_rep" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= H; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "beta_raw" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_b" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma_y");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= H; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tmp" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= L; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "y_rep" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"beta_raw\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(H) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sigma_b\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_y\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(H) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tmp\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_rep\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(H) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"beta_raw\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(H) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"sigma_b\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_y\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(H) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tmp\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_rep\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(H) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((H * K) + K) + 1);
      const size_t num_transformed = ((H * K) + K);
      const size_t num_gen_quantities = 
  ((L * M) * H);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((H * K) + K) + 1);
      const size_t num_transformed = ((H * K) + K);
      const size_t num_gen_quantities = 
  ((L * M) * H);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 3> names__{"beta_raw", "sigma_b",
      "sigma_y"};
      const std::array<Eigen::Index, 3> constrain_param_sizes__{(H * K), 
       K, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = time_model_2_model_namespace::time_model_2_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return time_model_2_model_namespace::profiles__;
}

#endif


