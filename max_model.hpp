
// Code generated by stanc v2.28.1
#include <stan/model/model_header.hpp>
namespace max_model_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 59> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 42, column 2 to column 9)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 43, column 2 to column 9)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 44, column 2 to column 9)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 45, column 2 to column 9)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 46, column 2 to column 12)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 47, column 2 to column 22)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 55, column 2 to column 139)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 18, column 2 to column 17)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 19, column 2 to column 22)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 20, column 9 to column 10)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 20, column 2 to column 25)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 21, column 9 to column 10)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 21, column 2 to column 26)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 22, column 9 to column 10)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 22, column 2 to column 30)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 23, column 9 to column 10)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 23, column 2 to column 26)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 24, column 9 to column 10)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 24, column 2 to column 14)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 27, column 2 to column 27)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 28, column 18 to column 19)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 28, column 2 to column 42)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 29, column 9 to column 15)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 29, column 2 to column 79)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 30, column 9 to column 15)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 30, column 2 to column 81)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 31, column 9 to column 15)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 31, column 2 to column 89)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 32, column 9 to column 15)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 32, column 2 to column 81)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 33, column 9 to column 15)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 33, column 2 to column 57)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 35, column 9 to column 16)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 35, column 2 to column 78)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 36, column 9 to column 16)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 36, column 2 to column 80)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 37, column 9 to column 16)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 37, column 2 to column 88)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 38, column 9 to column 16)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 38, column 2 to column 80)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 39, column 9 to column 16)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 39, column 2 to column 56)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 3, column 11 to column 12)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 3, column 5 to column 20)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 5, column 7 to column 16)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 4, column 20 to line 6, column 6)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 4, column 5 to line 6, column 6)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 7, column 12 to column 13)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 7, column 5 to column 46)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 9, column 6 to column 37)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 10, column 12 to column 13)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 10, column 6 to column 28)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 11, column 6 to column 18)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 12, column 6 to column 21)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 8, column 20 to line 13, column 6)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 8, column 5 to line 13, column 6)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 14, column 5 to column 14)",
 " (in '/Users/sotiriskaragounis/git/UHInyc/max_model.stan', line 2, column 37 to line 15, column 3)"};


template <typename RNG>
std::vector<int>
permutation_rng(const int& N, RNG& base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 43;
    validate_non_negative_index("y", "N", N);
    std::vector<int> y;
    y = std::vector<int>(N, std::numeric_limits<int>::min());
    
    current_statement__ = 47;
    for (int n = 1; n <= N; ++n) {
      current_statement__ = 45;
      assign(y, n, "assigning variable y", index_uni(n));
    }
    current_statement__ = 48;
    validate_non_negative_index("theta", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, 1> theta;
    theta = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
    stan::math::fill(theta, DUMMY_VAR__);
    
    current_statement__ = 49;
    assign(theta, rep_vector((1.0 / N), N), "assigning variable theta");
    current_statement__ = 56;
    for (int n = 1; n <= N; ++n) {
      int i;
      i = std::numeric_limits<int>::min();
      
      current_statement__ = 50;
      i = categorical_rng(theta, base_rng__);
      current_statement__ = 51;
      validate_non_negative_index("temp", "n", n);
      std::vector<int> temp;
      temp = std::vector<int>(n, std::numeric_limits<int>::min());
      
      current_statement__ = 52;
      assign(temp, y, "assigning variable temp");
      current_statement__ = 53;
      assign(y, rvalue(y, "y", index_uni(i)),
        "assigning variable y", index_uni(n));
      current_statement__ = 54;
      assign(y, rvalue(temp, "temp", index_uni(n)),
        "assigning variable y", index_uni(i));
    }
    current_statement__ = 57;
    return y;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct permutation_rng_functor__ {
template <typename RNG>
std::vector<int>
operator()(const int& N, RNG& base_rng__, std::ostream* pstream__)  const 
{
return permutation_rng(N, base_rng__, pstream__);
}
};

class max_model_model final : public model_base_crtp<max_model_model> {

 private:
  int N;
  int N_test;
  Eigen::Matrix<double, -1, 1> num_build500__;
  Eigen::Matrix<double, -1, 1> mean_fa_ratio__;
  Eigen::Matrix<double, -1, 1> min_distance_park__;
  Eigen::Matrix<double, -1, 1> num_trees_50m__;
  Eigen::Matrix<double, -1, 1> y__;
  int N_train;
  std::vector<int> permutation;
  Eigen::Matrix<double, -1, 1> num_build500_val__;
  Eigen::Matrix<double, -1, 1> mean_fa_ratio_val__;
  Eigen::Matrix<double, -1, 1> min_distance_park_val__;
  Eigen::Matrix<double, -1, 1> num_trees_50m_val__;
  Eigen::Matrix<double, -1, 1> y_val__;
  Eigen::Matrix<double, -1, 1> num_build500_train__;
  Eigen::Matrix<double, -1, 1> mean_fa_ratio_train__;
  Eigen::Matrix<double, -1, 1> min_distance_park_train__;
  Eigen::Matrix<double, -1, 1> num_trees_50m_train__;
  Eigen::Matrix<double, -1, 1> y_train__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> num_build500{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> mean_fa_ratio{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> min_distance_park{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> num_trees_50m{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> num_build500_val{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> mean_fa_ratio_val{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> min_distance_park_val{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> num_trees_50m_val{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y_val{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> num_build500_train{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> mean_fa_ratio_train{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> min_distance_park_train{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> num_trees_50m_train{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y_train{nullptr, 0};
 
 public:
  ~max_model_model() { }
  
  inline std::string model_name() const final { return "max_model_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.28.1", "stancflags = "};
  }
  
  
  max_model_model(stan::io::var_context& context__,
                  unsigned int random_seed__ = 0,
                  std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "max_model_model_namespace::max_model_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 8;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 8;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 8;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 9;
      context__.validate_dims("data initialization","N_test","int",
           std::vector<size_t>{});
      N_test = std::numeric_limits<int>::min();
      
      current_statement__ = 9;
      N_test = context__.vals_i("N_test")[(1 - 1)];
      current_statement__ = 9;
      check_greater_or_equal(function__, "N_test", N_test, 0);
      current_statement__ = 10;
      validate_non_negative_index("num_build500", "N", N);
      current_statement__ = 11;
      context__.validate_dims("data initialization","num_build500","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      num_build500__ = Eigen::Matrix<double, -1, 1>(N);
      new (&num_build500) Eigen::Map<Eigen::Matrix<double, -1, 1>>(num_build500__.data(), N);
      
      
      {
        std::vector<local_scalar_t__> num_build500_flat__;
        current_statement__ = 11;
        num_build500_flat__ = context__.vals_r("num_build500");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 11;
          assign(num_build500, num_build500_flat__[(pos__ - 1)],
            "assigning variable num_build500", index_uni(sym1__));
          current_statement__ = 11;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 12;
      validate_non_negative_index("mean_fa_ratio", "N", N);
      current_statement__ = 13;
      context__.validate_dims("data initialization","mean_fa_ratio","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      mean_fa_ratio__ = Eigen::Matrix<double, -1, 1>(N);
      new (&mean_fa_ratio) Eigen::Map<Eigen::Matrix<double, -1, 1>>(mean_fa_ratio__.data(), N);
      
      
      {
        std::vector<local_scalar_t__> mean_fa_ratio_flat__;
        current_statement__ = 13;
        mean_fa_ratio_flat__ = context__.vals_r("mean_fa_ratio");
        current_statement__ = 13;
        pos__ = 1;
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 13;
          assign(mean_fa_ratio, mean_fa_ratio_flat__[(pos__ - 1)],
            "assigning variable mean_fa_ratio", index_uni(sym1__));
          current_statement__ = 13;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 14;
      validate_non_negative_index("min_distance_park", "N", N);
      current_statement__ = 15;
      context__.validate_dims("data initialization","min_distance_park",
          "double", std::vector<size_t>{static_cast<size_t>(N)});
      min_distance_park__ = Eigen::Matrix<double, -1, 1>(N);
      new (&min_distance_park) Eigen::Map<Eigen::Matrix<double, -1, 1>>(min_distance_park__.data(), N);
      
      
      {
        std::vector<local_scalar_t__> min_distance_park_flat__;
        current_statement__ = 15;
        min_distance_park_flat__ = context__.vals_r("min_distance_park");
        current_statement__ = 15;
        pos__ = 1;
        current_statement__ = 15;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 15;
          assign(min_distance_park, min_distance_park_flat__[(pos__ - 1)],
            "assigning variable min_distance_park", index_uni(sym1__));
          current_statement__ = 15;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 16;
      validate_non_negative_index("num_trees_50m", "N", N);
      current_statement__ = 17;
      context__.validate_dims("data initialization","num_trees_50m","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      num_trees_50m__ = Eigen::Matrix<double, -1, 1>(N);
      new (&num_trees_50m) Eigen::Map<Eigen::Matrix<double, -1, 1>>(num_trees_50m__.data(), N);
      
      
      {
        std::vector<local_scalar_t__> num_trees_50m_flat__;
        current_statement__ = 17;
        num_trees_50m_flat__ = context__.vals_r("num_trees_50m");
        current_statement__ = 17;
        pos__ = 1;
        current_statement__ = 17;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 17;
          assign(num_trees_50m, num_trees_50m_flat__[(pos__ - 1)],
            "assigning variable num_trees_50m", index_uni(sym1__));
          current_statement__ = 17;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 18;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 19;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      y__ = Eigen::Matrix<double, -1, 1>(N);
      new (&y) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y__.data(), N);
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 19;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 19;
        pos__ = 1;
        current_statement__ = 19;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 19;
          assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", index_uni(sym1__));
          current_statement__ = 19;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 20;
      N_train = std::numeric_limits<int>::min();
      
      current_statement__ = 20;
      N_train = (N - N_test);
      current_statement__ = 21;
      validate_non_negative_index("permutation", "N", N);
      current_statement__ = 22;
      permutation = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 22;
      assign(permutation, permutation_rng(N, base_rng__, pstream__),
        "assigning variable permutation");
      current_statement__ = 23;
      validate_non_negative_index("num_build500_val", "N_test", N_test);
      current_statement__ = 24;
      num_build500_val__ = Eigen::Matrix<double, -1, 1>(N_test);
      new (&num_build500_val) Eigen::Map<Eigen::Matrix<double, -1, 1>>(num_build500_val__.data(), N_test);
      stan::math::fill(num_build500_val, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 24;
      assign(num_build500_val,
        rvalue(num_build500, "num_build500",
          index_multi(rvalue(permutation, "permutation",
                        index_min_max((N_train + 1), N)))),
        "assigning variable num_build500_val");
      current_statement__ = 25;
      validate_non_negative_index("mean_fa_ratio_val", "N_test", N_test);
      current_statement__ = 26;
      mean_fa_ratio_val__ = Eigen::Matrix<double, -1, 1>(N_test);
      new (&mean_fa_ratio_val) Eigen::Map<Eigen::Matrix<double, -1, 1>>(mean_fa_ratio_val__.data(), N_test);
      stan::math::fill(mean_fa_ratio_val, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 26;
      assign(mean_fa_ratio_val,
        rvalue(mean_fa_ratio, "mean_fa_ratio",
          index_multi(rvalue(permutation, "permutation",
                        index_min_max((N_train + 1), N)))),
        "assigning variable mean_fa_ratio_val");
      current_statement__ = 27;
      validate_non_negative_index("min_distance_park_val", "N_test", N_test);
      current_statement__ = 28;
      min_distance_park_val__ = Eigen::Matrix<double, -1, 1>(N_test);
      new (&min_distance_park_val) Eigen::Map<Eigen::Matrix<double, -1, 1>>(min_distance_park_val__.data(), N_test);
      stan::math::fill(min_distance_park_val, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 28;
      assign(min_distance_park_val,
        rvalue(min_distance_park, "min_distance_park",
          index_multi(rvalue(permutation, "permutation",
                        index_min_max((N_train + 1), N)))),
        "assigning variable min_distance_park_val");
      current_statement__ = 29;
      validate_non_negative_index("num_trees_50m_val", "N_test", N_test);
      current_statement__ = 30;
      num_trees_50m_val__ = Eigen::Matrix<double, -1, 1>(N_test);
      new (&num_trees_50m_val) Eigen::Map<Eigen::Matrix<double, -1, 1>>(num_trees_50m_val__.data(), N_test);
      stan::math::fill(num_trees_50m_val, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 30;
      assign(num_trees_50m_val,
        rvalue(num_trees_50m, "num_trees_50m",
          index_multi(rvalue(permutation, "permutation",
                        index_min_max((N_train + 1), N)))),
        "assigning variable num_trees_50m_val");
      current_statement__ = 31;
      validate_non_negative_index("y_val", "N_test", N_test);
      current_statement__ = 32;
      y_val__ = Eigen::Matrix<double, -1, 1>(N_test);
      new (&y_val) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y_val__.data(), N_test);
      stan::math::fill(y_val, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 32;
      assign(y_val,
        rvalue(y, "y",
          index_multi(rvalue(permutation, "permutation",
                        index_min_max((N_train + 1), N)))),
        "assigning variable y_val");
      current_statement__ = 33;
      validate_non_negative_index("num_build500_train", "N_train", N_train);
      current_statement__ = 34;
      num_build500_train__ = Eigen::Matrix<double, -1, 1>(N_train);
      new (&num_build500_train) Eigen::Map<Eigen::Matrix<double, -1, 1>>(num_build500_train__.data(), N_train);
      stan::math::fill(num_build500_train, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 34;
      assign(num_build500_train,
        rvalue(num_build500, "num_build500",
          index_multi(rvalue(permutation, "permutation",
                        index_min_max(1, N_train)))),
        "assigning variable num_build500_train");
      current_statement__ = 35;
      validate_non_negative_index("mean_fa_ratio_train", "N_train", N_train);
      current_statement__ = 36;
      mean_fa_ratio_train__ = Eigen::Matrix<double, -1, 1>(N_train);
      new (&mean_fa_ratio_train) Eigen::Map<Eigen::Matrix<double, -1, 1>>(mean_fa_ratio_train__.data(), N_train);
      stan::math::fill(mean_fa_ratio_train, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 36;
      assign(mean_fa_ratio_train,
        rvalue(mean_fa_ratio, "mean_fa_ratio",
          index_multi(rvalue(permutation, "permutation",
                        index_min_max(1, N_train)))),
        "assigning variable mean_fa_ratio_train");
      current_statement__ = 37;
      validate_non_negative_index("min_distance_park_train", "N_train",
                                  N_train);
      current_statement__ = 38;
      min_distance_park_train__ = Eigen::Matrix<double, -1, 1>(N_train);
      new (&min_distance_park_train) Eigen::Map<Eigen::Matrix<double, -1, 1>>(min_distance_park_train__.data(), N_train);
      stan::math::fill(min_distance_park_train, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 38;
      assign(min_distance_park_train,
        rvalue(min_distance_park, "min_distance_park",
          index_multi(rvalue(permutation, "permutation",
                        index_min_max(1, N_train)))),
        "assigning variable min_distance_park_train");
      current_statement__ = 39;
      validate_non_negative_index("num_trees_50m_train", "N_train", N_train);
      current_statement__ = 40;
      num_trees_50m_train__ = Eigen::Matrix<double, -1, 1>(N_train);
      new (&num_trees_50m_train) Eigen::Map<Eigen::Matrix<double, -1, 1>>(num_trees_50m_train__.data(), N_train);
      stan::math::fill(num_trees_50m_train, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 40;
      assign(num_trees_50m_train,
        rvalue(num_trees_50m, "num_trees_50m",
          index_multi(rvalue(permutation, "permutation",
                        index_min_max(1, N_train)))),
        "assigning variable num_trees_50m_train");
      current_statement__ = 41;
      validate_non_negative_index("y_train", "N_train", N_train);
      current_statement__ = 42;
      y_train__ = Eigen::Matrix<double, -1, 1>(N_train);
      new (&y_train) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y_train__.data(), N_train);
      stan::math::fill(y_train, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 42;
      assign(y_train,
        rvalue(y, "y",
          index_multi(rvalue(permutation, "permutation",
                        index_min_max(1, N_train)))),
        "assigning variable y_train");
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "max_model_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ a;
      a = DUMMY_VAR__;
      
      current_statement__ = 1;
      a = in__.template read<local_scalar_t__>();
      local_scalar_t__ b;
      b = DUMMY_VAR__;
      
      current_statement__ = 2;
      b = in__.template read<local_scalar_t__>();
      local_scalar_t__ c;
      c = DUMMY_VAR__;
      
      current_statement__ = 3;
      c = in__.template read<local_scalar_t__>();
      local_scalar_t__ d;
      d = DUMMY_VAR__;
      
      current_statement__ = 4;
      d = in__.template read<local_scalar_t__>();
      local_scalar_t__ bias;
      bias = DUMMY_VAR__;
      
      current_statement__ = 5;
      bias = in__.template read<local_scalar_t__>();
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__;
      
      current_statement__ = 6;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      {
        current_statement__ = 7;
        lp_accum__.add(
          normal_lpdf<propto__>(y_train,
            add(
              add(
                add(
                  add(multiply(a, num_build500_train),
                    multiply(b, mean_fa_ratio_train)),
                  multiply(c, min_distance_park_train)),
                multiply(d, num_trees_50m_train)), bias), sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "max_model_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double a;
      a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      a = in__.template read<local_scalar_t__>();
      double b;
      b = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      b = in__.template read<local_scalar_t__>();
      double c;
      c = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      c = in__.template read<local_scalar_t__>();
      double d;
      d = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      d = in__.template read<local_scalar_t__>();
      double bias;
      bias = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      bias = in__.template read<local_scalar_t__>();
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      out__.write(a);
      out__.write(b);
      out__.write(c);
      out__.write(d);
      out__.write(bias);
      out__.write(sigma);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      local_scalar_t__ a;
      a = DUMMY_VAR__;
      
      a = in__.read<local_scalar_t__>();
      out__.write(a);
      local_scalar_t__ b;
      b = DUMMY_VAR__;
      
      b = in__.read<local_scalar_t__>();
      out__.write(b);
      local_scalar_t__ c;
      c = DUMMY_VAR__;
      
      c = in__.read<local_scalar_t__>();
      out__.write(c);
      local_scalar_t__ d;
      d = DUMMY_VAR__;
      
      d = in__.read<local_scalar_t__>();
      out__.write(d);
      local_scalar_t__ bias;
      bias = DUMMY_VAR__;
      
      bias = in__.read<local_scalar_t__>();
      out__.write(bias);
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__;
      
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"a", "b", "c", "d", "bias", "sigma"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "a");
    param_names__.emplace_back(std::string() + "b");
    param_names__.emplace_back(std::string() + "c");
    param_names__.emplace_back(std::string() + "d");
    param_names__.emplace_back(std::string() + "bias");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "a");
    param_names__.emplace_back(std::string() + "b");
    param_names__.emplace_back(std::string() + "c");
    param_names__.emplace_back(std::string() + "d");
    param_names__.emplace_back(std::string() + "bias");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"bias\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"bias\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((1 + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 0;
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((1 + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 0;
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 6> names__{"a", "b", "c", "d", "bias",
      "sigma"};
      const std::array<Eigen::Index, 6> constrain_param_sizes__{1, 1, 
       1, 1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = max_model_model_namespace::max_model_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return max_model_model_namespace::profiles__;
}

#endif


